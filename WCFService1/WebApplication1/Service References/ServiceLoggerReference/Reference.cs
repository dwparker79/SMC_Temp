//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication1.ServiceLoggerReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceLoggerReference.IServiceLogger")]
    public interface IServiceLogger {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLogger/GetLogs", ReplyAction="http://tempuri.org/IServiceLogger/GetLogsResponse")]
        string[][] GetLogs(string[] serviceNames, string machineName, int pageNum, int logsPerPage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLogger/GetLogs", ReplyAction="http://tempuri.org/IServiceLogger/GetLogsResponse")]
        System.Threading.Tasks.Task<string[][]> GetLogsAsync(string[] serviceNames, string machineName, int pageNum, int logsPerPage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLogger/GetLogPage", ReplyAction="http://tempuri.org/IServiceLogger/GetLogPageResponse")]
        string[][] GetLogPage(int pageNum, int logsPerPage, string[] serviceNameFilters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLogger/GetLogPage", ReplyAction="http://tempuri.org/IServiceLogger/GetLogPageResponse")]
        System.Threading.Tasks.Task<string[][]> GetLogPageAsync(int pageNum, int logsPerPage, string[] serviceNameFilters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLogger/GetNumPages", ReplyAction="http://tempuri.org/IServiceLogger/GetNumPagesResponse")]
        int GetNumPages(int logsPerPage, string[] filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLogger/GetNumPages", ReplyAction="http://tempuri.org/IServiceLogger/GetNumPagesResponse")]
        System.Threading.Tasks.Task<int> GetNumPagesAsync(int logsPerPage, string[] filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLogger/WriteLog", ReplyAction="http://tempuri.org/IServiceLogger/WriteLogResponse")]
        void WriteLog(string log);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLogger/WriteLog", ReplyAction="http://tempuri.org/IServiceLogger/WriteLogResponse")]
        System.Threading.Tasks.Task WriteLogAsync(string log);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceLoggerChannel : WebApplication1.ServiceLoggerReference.IServiceLogger, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceLoggerClient : System.ServiceModel.ClientBase<WebApplication1.ServiceLoggerReference.IServiceLogger>, WebApplication1.ServiceLoggerReference.IServiceLogger {
        
        public ServiceLoggerClient() {
        }
        
        public ServiceLoggerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceLoggerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceLoggerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceLoggerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[][] GetLogs(string[] serviceNames, string machineName, int pageNum, int logsPerPage) {
            return base.Channel.GetLogs(serviceNames, machineName, pageNum, logsPerPage);
        }
        
        public System.Threading.Tasks.Task<string[][]> GetLogsAsync(string[] serviceNames, string machineName, int pageNum, int logsPerPage) {
            return base.Channel.GetLogsAsync(serviceNames, machineName, pageNum, logsPerPage);
        }
        
        public string[][] GetLogPage(int pageNum, int logsPerPage, string[] serviceNameFilters) {
            return base.Channel.GetLogPage(pageNum, logsPerPage, serviceNameFilters);
        }
        
        public System.Threading.Tasks.Task<string[][]> GetLogPageAsync(int pageNum, int logsPerPage, string[] serviceNameFilters) {
            return base.Channel.GetLogPageAsync(pageNum, logsPerPage, serviceNameFilters);
        }
        
        public int GetNumPages(int logsPerPage, string[] filter) {
            return base.Channel.GetNumPages(logsPerPage, filter);
        }
        
        public System.Threading.Tasks.Task<int> GetNumPagesAsync(int logsPerPage, string[] filter) {
            return base.Channel.GetNumPagesAsync(logsPerPage, filter);
        }
        
        public void WriteLog(string log) {
            base.Channel.WriteLog(log);
        }
        
        public System.Threading.Tasks.Task WriteLogAsync(string log) {
            return base.Channel.WriteLogAsync(log);
        }
    }
}
