//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication1.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IServiceLogger")]
    public interface IServiceLogger {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLogger/CanReadLogs", ReplyAction="http://tempuri.org/IServiceLogger/CanReadLogsResponse")]
        bool CanReadLogs();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLogger/CanReadLogs", ReplyAction="http://tempuri.org/IServiceLogger/CanReadLogsResponse")]
        System.Threading.Tasks.Task<bool> CanReadLogsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLogger/GetLogs", ReplyAction="http://tempuri.org/IServiceLogger/GetLogsResponse")]
        System.Collections.Generic.Dictionary<System.DateTime, string[]> GetLogs(string serviceName, string machineName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLogger/GetLogs", ReplyAction="http://tempuri.org/IServiceLogger/GetLogsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<System.DateTime, string[]>> GetLogsAsync(string serviceName, string machineName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLogger/CanWriteLog", ReplyAction="http://tempuri.org/IServiceLogger/CanWriteLogResponse")]
        bool CanWriteLog();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLogger/CanWriteLog", ReplyAction="http://tempuri.org/IServiceLogger/CanWriteLogResponse")]
        System.Threading.Tasks.Task<bool> CanWriteLogAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLogger/WriteLog", ReplyAction="http://tempuri.org/IServiceLogger/WriteLogResponse")]
        void WriteLog(string log);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLogger/WriteLog", ReplyAction="http://tempuri.org/IServiceLogger/WriteLogResponse")]
        System.Threading.Tasks.Task WriteLogAsync(string log);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceLoggerChannel : WebApplication1.ServiceReference.IServiceLogger, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceLoggerClient : System.ServiceModel.ClientBase<WebApplication1.ServiceReference.IServiceLogger>, WebApplication1.ServiceReference.IServiceLogger {
        
        public ServiceLoggerClient() {
        }
        
        public ServiceLoggerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceLoggerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceLoggerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceLoggerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool CanReadLogs() {
            return base.Channel.CanReadLogs();
        }
        
        public System.Threading.Tasks.Task<bool> CanReadLogsAsync() {
            return base.Channel.CanReadLogsAsync();
        }
        
        public System.Collections.Generic.Dictionary<System.DateTime, string[]> GetLogs(string serviceName, string machineName) {
            return base.Channel.GetLogs(serviceName, machineName);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<System.DateTime, string[]>> GetLogsAsync(string serviceName, string machineName) {
            return base.Channel.GetLogsAsync(serviceName, machineName);
        }
        
        public bool CanWriteLog() {
            return base.Channel.CanWriteLog();
        }
        
        public System.Threading.Tasks.Task<bool> CanWriteLogAsync() {
            return base.Channel.CanWriteLogAsync();
        }
        
        public void WriteLog(string log) {
            base.Channel.WriteLog(log);
        }
        
        public System.Threading.Tasks.Task WriteLogAsync(string log) {
            return base.Channel.WriteLogAsync(log);
        }
    }
}
